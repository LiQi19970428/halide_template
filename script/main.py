import argparse
import os
# Function Description:
"""A script for modifying the main file. Its primary functions include manually adding corresponding header files and time testing functions"""
"""The input parameter is the function filename generated by Simulink"""
"""For example, for a model named 'abc' with the specified language as C++, the input parameter should be 'abc.cpp'"""
def modify_file(module_name, file_path):
    include_line_1 = '#include "halide_benchmark.h"'
    include_line_2 = f'#include "{module_name}"'
    fixed_length = 27
    base_name, extension = os.path.splitext(module_name)
    extension = extension[1:]
    benchmark_code = (
        "    double time_taken_true = Halide::Tools::benchmark(1, 10, [&]() {\n"
        "        rt_OneStep();\n"
        "    });\n"
        "    printf(\"関数実行時間(スケジュール)：%f ms\\n\", time_taken_true * 1000);\n"
    )

    file_name = os.path.join(file_path, f'ert_main.{extension}')

    # Read the contents of the file
    with open(file_name, 'r') as file:
        lines = file.readlines()

    # Check and add the benchmark header file
    if include_line_1 not in lines[0]:
        lines.insert(0, include_line_1 + '\n')

    # Check and add the corresponding .cpp header file for the module
    if include_line_2 not in ''.join(lines):  
        lines.insert(1, include_line_2 + '\n')

    # Handle the code in the main function
    modified_lines = []
    in_initialization_section = False
    benchmark_already_added = benchmark_code in ''.join(lines)
    new_module_name = base_name[:fixed_length]
    print(new_module_name)
    for line in lines:
        if f"{new_module_name}_Obj.initialize();" in line:
            modified_lines.append(line)
            in_initialization_section = True
            continue

        if f"{new_module_name}_Obj.terminate();" in line:
            if not benchmark_already_added:
                modified_lines.append(benchmark_code)
                benchmark_already_added = True
            modified_lines.append(line)
            in_initialization_section = False
            continue

        if in_initialization_section:
            # If benchmark_code has already been added, then keep the existing code
            if not benchmark_already_added:
                modified_lines.append("// " + line)  # Comment out the code
            else:
                modified_lines.append(line)
            continue

        modified_lines.append(line)

    # Write back to the file
    with open(file_name, 'w') as file:
        file.writelines(modified_lines)


def main():
    parser = argparse.ArgumentParser(description="Modify a specific text file")
    parser.add_argument("module_name", type=str, help="Module name for specifying the header file")
    parser.add_argument("--file_path", type=str, default=".",
                        help="Directory path where the file is located, defaults to current directory")
    args = parser.parse_args()

    # Modify the ert_main file
    modify_file(args.module_name, args.file_path)

    print("The file modification is complete")


if __name__ == "__main__":
    main()
